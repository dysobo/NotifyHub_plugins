name: 自动发布插件包

on:
  push:
    tags:
      - 'plugin-*'
  workflow_dispatch:
    inputs:
      plugin_name:
        description: '插件名称'
        required: false
        default: 'all'

jobs:
  auto-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 运行打包脚本
      run: |
        python package_plugins.py
        
    - name: 创建Release
      if: startsWith(github.ref, 'refs/tags/plugin-')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 获取标签名
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # 从标签名提取插件名 (移除 plugin- 前缀和日期后缀)
        PLUGIN_NAME=${TAG_NAME#plugin-}
        PLUGIN_NAME=${PLUGIN_NAME%-*}
        
        echo "发布插件: $PLUGIN_NAME"
        echo "标签名: $TAG_NAME"
        
        # 列出所有zip文件进行调试
        echo "可用的zip文件:"
        ls -la packages/*.zip || echo "没有找到zip文件"
        
        # 查找对应的zip文件 - 使用更灵活的匹配
        ZIP_FILE=$(find packages -name "*${PLUGIN_NAME}*.zip" | head -1)
        
        if [ -z "$ZIP_FILE" ]; then
          echo "尝试其他匹配方式..."
          # 如果直接匹配失败，尝试匹配插件目录名
          case "$PLUGIN_NAME" in
            "用药提醒")
              ZIP_FILE=$(find packages -name "*用药提醒*.zip" | head -1)
              PLUGIN_DIR="pill_reminder"
              ;;
            "插件管理器")
              ZIP_FILE=$(find packages -name "*插件管理器*.zip" | head -1)
              PLUGIN_DIR="plugin_manager"
              ;;
            "QQ群消息转发")
              ZIP_FILE=$(find packages -name "*QQ群消息转发*.zip" | head -1)
              PLUGIN_DIR="qq_bridge"
              ;;
            "群晖Chat群组Webhook转发")
              ZIP_FILE=$(find packages -name "*群晖Chat*.zip" | head -1)
              PLUGIN_DIR="syno_chat_webhook"
              ;;
            "企业微信MeTube下载器")
              ZIP_FILE=$(find packages -name "*企业微信*.zip" | head -1)
              PLUGIN_DIR="wx_metube"
              ;;
            *)
              PLUGIN_DIR="$PLUGIN_NAME"
              ;;
          esac
        else
          # 从文件名推断插件目录
          case "$PLUGIN_NAME" in
            "用药提醒") PLUGIN_DIR="pill_reminder" ;;
            "插件管理器") PLUGIN_DIR="plugin_manager" ;;
            "QQ群消息转发") PLUGIN_DIR="qq_bridge" ;;
            "群晖Chat群组Webhook转发") PLUGIN_DIR="syno_chat_webhook" ;;
            "企业微信MeTube下载器") PLUGIN_DIR="wx_metube" ;;
            *) PLUGIN_DIR="$PLUGIN_NAME" ;;
          esac
        fi
        
        echo "找到的zip文件: $ZIP_FILE"
        echo "插件目录: $PLUGIN_DIR"
        
        if [ -f "$ZIP_FILE" ]; then
          # 读取插件信息
          if [ -f "${PLUGIN_DIR}/manifest.json" ]; then
            PLUGIN_VERSION=$(python -c "import json; print(json.load(open('${PLUGIN_DIR}/manifest.json'))['version'])" 2>/dev/null || echo "1.0.0")
            PLUGIN_DESC=$(python -c "import json; print(json.load(open('${PLUGIN_DIR}/manifest.json'))['description'])" 2>/dev/null || echo "无描述")
            PLUGIN_AUTHOR=$(python -c "import json; print(json.load(open('${PLUGIN_DIR}/manifest.json'))['author'])" 2>/dev/null || echo "未知")
          else
            PLUGIN_VERSION="1.0.0"
            PLUGIN_DESC="无描述"
            PLUGIN_AUTHOR="未知"
          fi
          
          echo "插件版本: $PLUGIN_VERSION"
          
          # 创建Release
          gh release create "$TAG_NAME" "$ZIP_FILE" \
            --title "${PLUGIN_NAME} v${PLUGIN_VERSION}" \
            --notes "自动发布的 ${PLUGIN_NAME} 插件包

**插件信息:**
- 名称: ${PLUGIN_NAME}
- 版本: ${PLUGIN_VERSION}
- 描述: ${PLUGIN_DESC}
- 作者: ${PLUGIN_AUTHOR}

**更新时间:** $(date '+%Y-%m-%d %H:%M:%S')
**仓库地址:** https://github.com/${{ github.repository }}

**安装说明:**
1. 下载zip文件
2. 解压到NotifyHub的plugins目录
3. 重启NotifyHub服务
4. 在插件管理中启用插件

**注意事项:**
- 请确保NotifyHub版本兼容
- 安装前请备份现有配置
- 如有问题请提交Issue反馈"
          
          echo "✅ $PLUGIN_NAME 发布完成: $TAG_NAME"
        else
          echo "❌ 找不到 $PLUGIN_NAME 的打包文件"
          echo "可用的文件:"
          ls -la packages/ || echo "packages目录不存在"
          exit 1
        fi
        
    - name: 手动发布所有插件
      if: github.event_name == 'workflow_dispatch' && inputs.plugin_name == 'all'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "发布所有插件包"
        
        # 获取所有插件包
        for zip_file in packages/*.zip; do
          if [ -f "$zip_file" ]; then
            # 从文件名提取插件名
            filename=$(basename "$zip_file")
            plugin_name=$(echo "$filename" | cut -d'_' -f1)
            
            echo "处理插件: $plugin_name"
            
            # 创建版本标签
            VERSION=$(date +"%Y.%m.%d")
            TAG_NAME="plugin-${plugin_name}-${VERSION}"
            
            # 检查标签是否已存在
            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "标签 $TAG_NAME 已存在，跳过"
              continue
            fi
            
            # 读取插件信息
            if [ -f "${plugin_name}/manifest.json" ]; then
              PLUGIN_VERSION=$(python -c "import json; print(json.load(open('${plugin_name}/manifest.json'))['version'])" 2>/dev/null || echo "1.0.0")
              PLUGIN_DESC=$(python -c "import json; print(json.load(open('${plugin_name}/manifest.json'))['description'])" 2>/dev/null || echo "无描述")
              PLUGIN_AUTHOR=$(python -c "import json; print(json.load(open('${plugin_name}/manifest.json'))['author'])" 2>/dev/null || echo "未知")
            else
              PLUGIN_VERSION="1.0.0"
              PLUGIN_DESC="无描述"
              PLUGIN_AUTHOR="未知"
            fi
            
            # 创建Release
            gh release create "$TAG_NAME" "$zip_file" \
              --title "${plugin_name} v${PLUGIN_VERSION}" \
              --notes "自动发布的 ${plugin_name} 插件包

**插件信息:**
- 名称: ${plugin_name}
- 版本: ${PLUGIN_VERSION}
- 描述: ${PLUGIN_DESC}
- 作者: ${PLUGIN_AUTHOR}

**更新时间:** $(date '+%Y-%m-%d %H:%M:%S')
**仓库地址:** https://github.com/${{ github.repository }}

**安装说明:**
1. 下载zip文件
2. 解压到NotifyHub的plugins目录
3. 重启NotifyHub服务
4. 在插件管理中启用插件

**注意事项:**
- 请确保NotifyHub版本兼容
- 安装前请备份现有配置
- 如有问题请提交Issue反馈"
            
            echo "✅ $plugin_name 发布完成: $TAG_NAME"
          fi
        done
